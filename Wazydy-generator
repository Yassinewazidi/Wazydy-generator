from flask import Flask, render_template, request, redirect, url_for, session
from flask_oauthlib.client import OAuth
import tensorflow as tf
from tensorflow.keras import layers, models
import matplotlib.pyplot as plt
import openai
import os

app = Flask(__name__)
app.secret_key = 'your-secret-key'

# Configurar OpenAI API Key (reemplaza 'tu-api-key' con tu propia clave)
openai.api_key = 'tu-api-key'

# Configuración de autenticación con Google
google_oauth = OAuth(app)
google = google_oauth.remote_app(
    'google',
    consumer_key='your-google-client-id',
    consumer_secret='your-google-client-secret',
    request_token_params={
        'scope': 'email',
    },
    base_url='https://www.googleapis.com/oauth2/v1/',
    request_token_url=None,
    access_token_method='POST',
    access_token_url='https://accounts.google.com/o/oauth2/token',
    authorize_url='https://accounts.google.com/o/oauth2/auth',
)

# Configuración de autenticación con Facebook
facebook_oauth = OAuth(app)
facebook = facebook_oauth.remote_app(
    'facebook',
    consumer_key='your-facebook-app-id',
    consumer_secret='your-facebook-app-secret',
    request_token_params={'scope': 'email'},
    base_url='https://graph.facebook.com/',
    request_token_url=None,
    access_token_method='GET',
    access_token_url='/oauth/access_token',
    authorize_url='https://www.facebook.com/dialog/oauth',
)

class AttentionLayer(layers.Layer):
    # ... (código de la capa de atención)

class Generator(tf.keras.Model):
    # ... (código del generador)

class TextAI:
    def __init__(self):
        pass

    def generate_text(self, input_text):
        # Usa OpenAI GPT-3 para generar texto en respuesta a la entrada del usuario
        response = openai.Completion.create(
            engine="text-davinci-002",
            prompt=input_text,
            max_tokens=100
        )
        return response.choices[0].text.strip()

# Tamaño del espacio latente para la generación de imágenes
latent_dim = 100
# Tamaño de la imagen generada
output_shape = (64, 64, 3)
# Número de estilos para la generación de imágenes
num_styles = 3

# Crear el generador con múltiples estilos
image_generator = Generator(latent_dim, output_shape, num_styles)

# Resumen del generador de imágenes
image_generator.build((None, latent_dim))
image_generator.summary()

# Instanciar el modelo de texto
text_ai = TextAI()

# Directorio para almacenar imágenes generadas
output_directory = "static/generated_images"
os.makedirs(output_directory, exist_ok=True)

# Función para generar y guardar imágenes con un estilo específico
def generate_and_save_images(generator, latent_dim, style_idx, num_images=1, output_directory="static/generated_images"):
    random_input = tf.random.normal([num_images, latent_dim])
    generated_images = generator(random_input, style_idx, training=False).numpy()

    # Guardar las imágenes en archivos
    for i in range(num_images):
        filename = f"{output_directory}/generated_image_style_{style_idx}_{i+1}.png"
        plt.imsave(filename, generated_images[i])

# Rutas web
@app.route('/')
def index():
    return '''
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Generador IA</title>
        </head>
        <body>
            <h1>Generador IA</h1>
            <form action="/generate" method="post">
                <label for="user_input">Ingresa tu texto:</label>
                <input type="text" id="user_input" name="user_input" required>
                <button type="submit">Generar</button>
            </form>
            <br>
            <a href="/login/google">Iniciar sesión con Google</a>
            <br>
            <a href="/login/facebook">Iniciar sesión con Facebook</a>
        </body>
        </html>
    '''

@app.route('/generate', methods=['POST'])
def generate():
    user_input_for_text = request.form['user_input']
    
    # Generar texto
    generated_text_response = text_ai.generate_text(user_input_for_text)

    # Generar y guardar imágenes
    for style_idx in range(num_styles):
        generate_and_save_images(image_generator, latent_dim, style_idx, num_images=1, output_directory=output_directory)

    return f'''
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Resultados</title>
        </head>
        <body>
            <h2>Resultados</h2>
            <p>Texto ingresado: {user_input_for_text}</p>
            <p>Respuesta generada: {generated_text_response}</p>

            <h3>Imágenes generadas:</h3>
            {"".join([f'<img src="static/generated_images/generated_image_style_{style_idx}_{i+1}.png" alt="Generated Image Style {style_idx}">' for i in range(3)])}
        </body>
        </html>
    '''

@app.route('/login/google')
def login_google():
    return google.authorize(callback=url_for('authorized_google', _external=True))

@app.route('/login/facebook')
def login_facebook():
    return facebook.authorize(callback=url_for('authorized_facebook', _external=True))

@app.route('/logout')
def logout():
    session.pop('google_token', None)
    session.pop('facebook_token', None)
    return redirect(url_for('index'))

@app.route('/login/authorized/google')
def authorized_google():
    response = google.authorized_response()
    if response is None or response.get('access_token') is None:
        return 'Acceso denegado: razón={}, error={}'.format(
            request.args['error_reason'],
            request.args['error_description']
        )
    
    session['google_token'] = (response['access_token'], '')
    user_info = google.get('userinfo')
    return f'Inicio de sesión exitoso con Google. ID: {user_info.data["id"]}, Nombre: {user_info.data["name"]}'

@app.route('/login/authorized/facebook')
def authorized_facebook():
    response = facebook.authorized_response()
    if response is None or response.get('access_token') is None:
        return 'Acceso denegado: razón={}, error={}'.format(
            request.args['error_reason'],
            request.args['error_description']
        )

    session['facebook_token'] = (response['access_token'], '')
    user_info = facebook.get('/me')
    return f'Inicio
